server{
       listen               443 http2 ssl;
       listen               [::]:433 http2 ssl;

       server_name          api.shkembridge.ru;

       ssl_certificate      /etc/ssl/certs/shkembridge_api_chain.pem;
       ssl_certificate_key  /etc/ssl/private/shkembridge_api_private_key.pem;

       ssl_protocols TLSv1.2;
       ssl_prefer_server_ciphers on;
       ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
       ssl_ecdh_curve secp384r1;
       ssl_session_timeout  10m;
       ssl_session_cache shared:SSL:10m;
       ssl_session_tickets off;
       ssl_stapling on;
       ssl_stapling_verify on;
       resolver 8.8.8.8 8.8.4.4 valid=300s;
       resolver_timeout 5s;
       # Disable preloading HSTS for now.  You can use the commented out header line that includes
       # the "preload" directive if you understand the implications.
       #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
       add_header X-Frame-Options DENY;
       add_header X-Content-Type-Options nosniff;
       add_header X-XSS-Protection "1; mode=block";
       location /api/glossary {
               proxy_pass http://localhost:1338;
       }

       location / {
               proxy_pass http://localhost:1337;
       }
}

server {
        listen 80;
        listen [::]:80;

        server_name api.shkembridge.ru;
        return 301 https://$host$request_uri;

}

server {
        listen               443 http2 ssl;
        listen               [::]:433 http2 ssl;

        ssl_certificate      /etc/ssl/certs/shkembridge_web_chain.pem;
        ssl_certificate_key  /etc/ssl/private/shkembridge_web_private_key.pem;

        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout  10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        # Disable preloading HSTS for now.  You can use the commented out header line that includes
        # the "preload" directive if you understand the implications.
        #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        root /var/www/html/shkembridge;

        server_name www.shkembridge.ru shkembridge.ru;

        # location ~^/.well-known {
        #        try_files $uri.html $uri/ =404;
        # }

        location ~\.css$ {
                try_files $uri $uri/ =404;
        }

        location ~\.js$ {
                try_files $uri $uri/ =404;
        }

        location ~\.woff$ {
                try_files $uri $uri/ =404;
        }

        location ~\.woff2$ {
                try_files $uri $uri/ =404;
        }

        location ~\.mp4$ {
                try_files $uri $uri/ =404;
        }

        location ~\.png$ {
                try_files $uri $uri/ =404;
        }

        location ~\.jpg$ {
                try_files $uri $uri/ =404;
        }

        location ~\.svg$ {
                try_files $uri $uri/ =404;
        }

        location ~\.ttf$ {
                try_files $uri $uri/ =404;
        }


        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.

                rewrite . /index.html break;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

server {
        listen 80;
        listen [::]:80;

        server_name shkembridge.ru;
        return 301 https://$host$request_uri;

}
